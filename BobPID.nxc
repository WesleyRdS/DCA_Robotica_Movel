#define LEFT_WELL OUT_B
#define RIGHT_WHELL OUT_C
#define BOTH_WHELL OUT_BC
#define WHELLS_RADIUS 2.6
#define ROBOT_DIAMETER 16.5
#define PI_FACTOR 3.14159265358979323846
#define euler 2.718281828459045

//Prototypes
void move_robot(int velocity, int diferential_factor, float distance, float whells_r);
void PID(int y_o,int y,int x_o,int x, int velocity, float max_angle);
float my_sqrt(float x);
float my_fabs(float x);
float my_atan2(float y, float x);
float my_sin(float x);
float my_cos(float x);
float normalizeAngle(float angle);

task main()
{
    SetSensorUltrasonic(IN_4);
}

void move_robot(int velocity, int diferential_factor, float distance, float whells_r)
{
    float rotations_targent = distance / (2*PI_FACTOR*whells_r);
    int right_rotations = 0;
    int left_rotations = 0;
    int total_rotations = (rotations_targent*100);

    OnFwdSync(BOTH_WHELL, velocity, diferential_factor);

    while (right_rotations < total_rotations && left_rotations < total_rotations)
    {
        right_rotations = MotorRotationCount(RIGHT_WHELL);
        left_rotations = MotorRotationCount(LEFT_WELL);
    }
    Off(BOTH_WHELL);
    
}
float normalizeAngle(float angle) {
    while (angle > PI_FACTOR) {
        angle -= 2 * PI_FACTOR;
    }
    while (angle <= -PI_FACTOR) {
        angle += 2 * PI_FACTOR;
    }
    return angle;
}

float my_fabs(float x) {
    return (x < 0) ? -x : x;
}

float my_sqrt(float x) {
    if (x < 0) {
        return -1;
    }
    float guess = x / 2.0; // Chute inicial
    float epsilon = ((1*euler)-6);  // Precisão desejada

    while (1) {
        float new_guess = (guess + x / guess) / 2.0;
        if (my_fabs(new_guess - guess) < epsilon) {
            return new_guess;
        }
        guess = new_guess;
    }
}

float my_sin(float x) {
    float result = 0;
    float term = x; // O primeiro termo da série é x
    int n = 1;

    // Somando termos da série de Taylor
    while (my_fabs(term) > (1*euler)-6) {
        result += term;
        term *= -x * x / ((2 * n) * (2 * n + 1)); // Calculando o próximo termo
        n++;
    }

    return result;
}

float my_atan(float x) {
    float result = x;
    float term = x;
    int n = 1;
    
    while (my_fabs(term) > (1*euler)-6) {
        term *= -x * x * (2 * n - 1) / (2 * n);
        result += term;
        n++;
    }

    return result;
}

float my_atan2(float y, float x) {
    if (x == 0 && y == 0) {
        return 0; // Definir um valor arbitrário quando ambos os valores forem zero
    }
    float angle = 0;
    if (x > 0) {
        angle = y / x;
    } else if (x < 0 && y >= 0) {
        angle = (y / x) + 3.14159265358979; // Ajuste do quadrante
    } else if (x < 0 && y < 0) {
        angle = (y / x) - 3.14159265358979;
    } else if (x == 0) {
        angle = 3.14159265358979 / 2;
    }
    return angle;
}

float my_cos(float x) {
    float result = 1;
    float term = 1; // O primeiro termo da série é 1
    int n = 1;

    // Somando termos da série de Taylor
    while (my_fabs(term) > (1*euler)-6) {
        term *= -x * x / ((2 * n - 1) * (2 * n)); // Calculando o próximo termo
        result += term;
        n++;
    }

    return result;
}



void PID(int y_o,int y,int x_o,int x, int velocity, float max_angle)
{
    int maxv = velocity;
    float maxw = max_angle*(PI_FACTOR/180);
    float rho = 100000;
    while (true)
    {
        float robotPos[] = {1.0, 2.0, 0.5};  // Posição do robô (x, y, orientação)
        float goalPos[] = {4.0, 6.0, 1.0};   // Posição do objetivo (x, y, orientação)
        float maxv = 25, maxw = 45;         // Velocidades máximas
        float L = 16, R = 2.6;               // Distância entre as rodas e raio das rodas

        // Configuração do robô e objetivo (goal)
        float robotConfig[];
        float qgoal[];
        ArrayBuild(robotConfig,robotPos);
        ArrayBuild(qgoal, goalPos);
        // Diferenças entre o estado atual e o objetivo
        float dx = qgoal[0] - robotConfig[0];
        float dy = qgoal[1] - robotConfig[1];
        float dth = qgoal[2] - robotConfig[2];
        
        // Cálculo de rho (distância)
        float rho = my_sqrt(dx * dx + dy * dy);

        // Cálculo dos ângulos alpha e beta
        float alpha = normalizeAngle(-robotConfig[2] + my_atan2(dy, dx));
        float beta = normalizeAngle(qgoal[2] - my_atan2(dy, dx));

        // Ganhos
        float kr = 4.0 / 20.0;
        float ka = 8.0 / 20.0;
        float kb = -1.5 / 20.0;

        // Alvo na parte de trás
        if (my_fabs(alpha) > PI_FACTOR / 2) {
            kr = -kr;

            // Ajusta a direção
            alpha = normalizeAngle(alpha - PI_FACTOR);
            beta = normalizeAngle(beta - PI_FACTOR);
        }

        // Cálculo de velocidades
        float v = kr * rho;
        float w = ka * alpha + kb * beta;

        // Saturação das velocidades
        if (v > maxv) v = maxv;
        if (v < -maxv) v = -maxv;
        if (w > maxw) w = maxw;
        if (w < -maxw) w = -maxw;

        // Conversão para velocidades de roda
        float wr = ((2.0 * v) + (w * L)) / (2.0 * R);
        float wl = ((2.0 * v) - (w * L)) / (2.0 * R);

        OnFwd(RIGHT_WHELL, wr);
        OnFwd(LEFT_WELL, wl);
        
        if(rho < 1)
        {
            Off(BOTH_WHELL);
        }
    }
    

}