#define LEFT_WHELL OUT_B
#define RIGHT_WHELL OUT_C
#define BOTH_WHEELS OUT_BC
#define WHELLS_RADIUS 2.25
#define ROBOT_DIAMETER 16.7
#define PI_FACTOR 3.14159265358979323846
#define BT_CONN 1
#define INBOX 1
#define OUTBOX 5

//Prototypes
void move_robot(int velocity, float distance, float whells_r);
void prevt(string path_data, string initial_position, int dteta) ;
void turn_robot(int velocity, int differential_factor, float degrees, float wheel_radius);
unsigned int findCloseParenteses(string str, unsigned int startIdx);
unsigned int findOpenParenteses(string str, unsigned int startIdx);
void move_and_turn(int turn_speed, int turn_angle, int move_speed);
int findComma(string str);

//Vars
unsigned int idx = 0;  
unsigned int startIdx = 0;  
unsigned int endIdx = 0;  
unsigned int len = 0; 
string tupla;
string msg_recv = "[";
string angle = "";
string pos_o = "";
int count = 0;
int o_orientation = 0;
mutex motor_control;

void receive_path()
{
    while (true)
    {
        string tempMSG = "";
        string aux = "";
        ReceiveMessage(INBOX, true, tempMSG);
        if(tempMSG == "init")
        {
            while(pos_o == ""){
            	ReceiveMessage(INBOX, false, pos_o);
            }
        }
        if(tempMSG != aux && tempMSG != "init" && tempMSG != "end")
        {
            msg_recv += tempMSG+",";
            aux = tempMSG;
        }
        if(tempMSG == "end"){
            break;
        }
        TextOut(0,LCD_LINE2,"Recebendo(Lista de adj):");
        TextOut(0,LCD_LINE3,msg_recv);
    }
    msg_recv += "]";
    while (angle == "")
    {
        ReceiveMessage(INBOX, true, angle);
    }
    TextOut(0,LCD_LINE4,angle);
    ClearScreen();
}

task main()
{
    SetSensorUltrasonic(IN_4);
    //receive_path();
    //TextOut(0,LCD_LINE4,aux);
    //prevt(msg_recv,pos_o,StrToNum(angle));
    string teste = "[(1, 1), (2, 1), (3, 1), (4, 1), (4, 2), (4, 3), (4, 4), (4, 5), (4, 6), (4, 7), (4, 8), (4, 9), (4, 10), (3, 10), (2, 10), (1, 10)]";
    prevt(teste,"(1,1)",270); 
    

}

void move_robot(int velocity, float distance, float whells_r)
{
    float rotations_targent = distance / (2*PI_FACTOR*whells_r);
    int rightO_rotations = MotorRotationCount(RIGHT_WHELL);
    int leftO_rotations = MotorRotationCount(LEFT_WHELL);
    int right_rotations = 0;
    int left_rotations = 0;
    int total_rotations = (rotations_targent*1000)/3.6;
    Acquire(motor_control);
    RotateMotorEx(BOTH_WHEELS, velocity, total_rotations, 0, true, true);

    while (right_rotations < total_rotations && left_rotations < total_rotations)
    {
    	
        right_rotations = abs(MotorRotationCount(RIGHT_WHELL) - rightO_rotations);
        left_rotations = abs(MotorRotationCount(LEFT_WHELL) - leftO_rotations);
    }
    Off(BOTH_WHEELS);   
    Release(motor_control);
}

//diferenctial_factor: 100 para esquerda e -100 para a direita
void turn_robot(int velocity, int differential_factor, float degrees, float wheel_radius) {
    int right_rotations = 0;
    int left_rotations = 0;
    float teta = 0;
    float tolerance = 10;

    Acquire(motor_control);
    while (degrees - teta > tolerance)
    { 	
	RotateMotorEx(BOTH_WHEELS, velocity, degrees, differential_factor, true, true);
        right_rotations = (MotorRotationCount(RIGHT_WHELL))/2*wheel_radius;
        left_rotations = (MotorRotationCount(LEFT_WHELL))/2*wheel_radius;
        teta += abs(right_rotations - left_rotations)/(4*wheel_radius);
        TextOut(0,LCD_LINE2,NumToStr(degrees - teta));
    }
    count += 1;
    if (count == 2 && o_orientation == 0)
    {
    	RotateMotorEx(BOTH_WHEELS, velocity, degrees, -differential_factor, true, true);
    }else if ((count == 2 || count == 3) && (o_orientation == 180))
    {
    	RotateMotorEx(BOTH_WHEELS, velocity, degrees, differential_factor, true, true);
    	RotateMotorEx(BOTH_WHEELS, velocity, degrees, differential_factor, true, true);
    }else if(count == 2 && o_orientation == 90){
    	RotateMotorEx(BOTH_WHEELS, velocity, degrees, differential_factor, true, true);
    	RotateMotorEx(BOTH_WHEELS, velocity, degrees, differential_factor, true, true);
    }else if(count == 3 && o_orientation == 90){
    	RotateMotorEx(BOTH_WHEELS, velocity, degrees, -differential_factor, true, true);
    }else if(count == 2 && o_orientation == 270){
    	RotateMotorEx(BOTH_WHEELS, velocity, degrees, differential_factor, true, true);
    	RotateMotorEx(BOTH_WHEELS, velocity, degrees, differential_factor, true, true);
    }
    Off(BOTH_WHEELS);
    Release(motor_control);
}


unsigned int findOpenParenteses(string str, unsigned int startIdx)
{
    for(unsigned int i = startIdx; i < StrLen(str); i++)
    {
        if(str[i] == '(')
        {
            return i;
        }
    }
    return -1;
}

unsigned int findCloseParenteses(string str, unsigned int startIdx)
{
    for(unsigned int i = startIdx; i < StrLen(str); i++)
    {
        if(str[i] == ')')
        {
            return i;
        }
    }
    return -1;
}

// Função auxiliar para executar movimentos
void move_and_turn(int turn_speed, int turn_angle, int move_speed) {
    turn_robot(25, turn_speed, turn_angle, WHELLS_RADIUS);
    move_robot(25, move_speed, WHELLS_RADIUS);
}

// Função para encontrar a posição da vírgula na string
int findComma(string str) {
    for (int i = 0; i < StrLen(str); i++) {
        if (str[i] == ',') {
            return i;
        }
    }
    return -1; // Retorna -1 se não encontrar a vírgula
}

void prevt(string path_data, string initial_position, int dteta) {
    string current_position = initial_position;
    int current_orientation = dteta; // Orientação inicial do robô (0, 90, 180, 270 graus)
    o_orientation = current_orientation;
    while (true) {
        startIdx = findOpenParenteses(path_data, idx);
        if (startIdx == -1) break;

        endIdx = findCloseParenteses(path_data, startIdx);
        if (endIdx == -1) break;

        len = endIdx - startIdx + 1;
        tupla = SubStr(path_data, startIdx, len);
        SendMessage(OUTBOX, tupla);


        TextOut(0, LCD_LINE1, tupla); // Exibe a tupla na tela
        

        // Extraindo coordenadas da posição atual e da próxima posição
        // Encontrar a vírgula em current_position
        int commaPos = findComma(current_position);  // Encontrar a vírgula
        int YOaux = StrToNum(SubStr(current_position, 1, commaPos - 1));  // Coordenada Y
        int XOaux = StrToNum(SubStr(current_position, commaPos + 1, StrLen(current_position) - commaPos - 1));  // Coordenada X

        // Encontrar a vírgula em tupla
        commaPos = findComma(tupla);  // Encontrar a vírgula na tupla
        int Yaux = StrToNum(SubStr(tupla, 1, commaPos - 1));  // Coordenada Y da tupla
        int Xaux = StrToNum(SubStr(tupla, commaPos + 1, StrLen(tupla) - commaPos - 1));  // Coordenada X da tupla

        // Calculando mudanças em X e Y
        int deltaX = Xaux - XOaux;
        int deltaY = Yaux - YOaux;

        // Determinando a ação com base na orientação atual -100 esquerda 100 direita
        if (deltaX > 0) { // Movendo no eixo X positivo
            if (current_orientation == 0) {
                move_robot(25, 10, WHELLS_RADIUS);
            } else if (current_orientation == 90) {
                move_and_turn(100, 90, 10);
                current_orientation = 0;
            } else if (current_orientation == 180) {
                move_and_turn(100, 180, 10);
                current_orientation = 0;
            } else if (current_orientation == 270) {
                move_and_turn(100, 90, 10);
                current_orientation = 0;
            }
        } else if (deltaX < 0) { // Movendo no eixo X negativo
            if (current_orientation == 180) {
                move_robot(25, 10, WHELLS_RADIUS);
            } else if (current_orientation == 90) {
                move_and_turn(100, 90, 10);
                current_orientation = 180;
            } else if (current_orientation == 270) {
                move_and_turn(-100, 90, 10);
                current_orientation = 180;
            } else if (current_orientation == 0) {
                move_and_turn(100, 1800, 10);
                current_orientation = 180;
            }
            
            
        } else if (deltaY > 0) { // Movendo no eixo Y positivo
            if (current_orientation == 90) {
             	move_and_turn(-100, 180, 10);
             	current_orientation = 270;
            } else if (current_orientation == 0) {
                move_and_turn(-100, 90, 10);
                current_orientation = 270;
            } else if (current_orientation == 180) {
                move_and_turn(100, 90, 10);
                current_orientation = 270;
            } else if (current_orientation == 270) {
                move_robot(25, 10, WHELLS_RADIUS);
            }
        } else if (deltaY < 0) { // Movendo no eixo Y negativo
            if (current_orientation == 270) {
                move_and_turn(100, 180, 10);
                current_orientation = 90;
            } else if (current_orientation == 0) {
                move_and_turn(100, 90, 10);
                current_orientation = 90;
            } else if (current_orientation == 90) {
                move_robot(25, 10, WHELLS_RADIUS);
            } else if (current_orientation == 180) {
                move_and_turn(-100, 90, 10);
                current_orientation = 90;
            }
        }

        // Atualizar posição e índice
        current_position = tupla;
        idx = endIdx;
    }
}
